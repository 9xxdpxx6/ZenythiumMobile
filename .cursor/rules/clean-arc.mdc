---
alwaysApply: true
---
### Архитектура и конвенции (внутреннее правило)
- Стратификация:
  - Views: оркестрация данных/роутинга, минимум логики, используют сервисы/компосаблы.
  - Components: UI и локальный ввод. Без бизнес-логики. Переиспользуемое поведение — только через composables.
  - Composables: инкапсулируют поведение/состояние, typed API, минимум побочных эффектов, чёткие функции.
  - Services: единственная точка общения с backend; используют относительные пути из `API_ENDPOINTS`, axios клиент уже включает `/api/v1`.
  - Types/Constants/Utils/Config — по назначению, без дублирования.

- Типизация и стиль:
  - Имена говорящие, никакого `any` без причины и как можно быстрее сузить тип.
  - Экспортируемые функции — явно типизировать. Ранние возвраты вместо вложенности.
  - Ошибки не глотать: `errorHandler.log(err, 'Context')`; успешные мутации — `logger.info`.

- API/Endpoints:
  - Никогда не дублировать `/api/v1` в путях сервиса — только относительные строки.
  - Все новые эндпоинты — в `constants/api-endpoints.ts`.
  - Если API-форма не совпадает с доменной — маппить в сервисе (вход/выход).

- Формы и модалки:
  - Если модалка хранит `localForm`, на submit эмитить именно его (актуальные значения).
  - Родительский обработчик принимает payload и НОРМАЛИЗУЕТ: trim строк, привести id к числу, дефолты булей.
  - Никогда не отправлять в API «сырой» state без нормализации.

- Жесты и карточки:
  - Для долгого нажатия и жестов всегда использовать `useLongPress({ threshold, onPressStart, onPressEnd })`.
  - В клике звать `longPress.handleClick(() => emit('click', payload))`. Любое движение > threshold — отмена long-press/клика.
  - Карточки эмитят: `click`, `press-start`, `press-end`. Сама модалка открывается во View.

- Data fetching:
  - По возможности `useDataFetching(fetchFn, { immediate })`. Вручную — только при сложных зависимостях.
  - Вью отвечает за сбор фильтров/пагинации и прокидывает их в сервис.

- Логи:
  - Успешные create/update/delete — краткий `logger.info`.
  - Везде, где catch — `errorHandler.log(err, 'Service.method')` или понятный контекст.

- Форматирование:
  - Часто используемое — в `utils/formatters.ts` (`formatDuration`, `formatWeight` и т.д.).
  - Локальные (например, русское `Xч Yм`) — внутри компонента/вью.

- Порядок действий при добавлении фичи:
  1) Типы (domain/API) → 2) `API_ENDPOINTS` → 3) Сервис (relative paths, маппинг) →
  4) Composable (поведение) → 5) Component (UI) → 6) View (оркестрация) →
  7) Логи/ошибки → 8) Проверка `/api/v1` не продублирован.

- Проверки перед коммитом:
  - Нет ли `/api/v1` в путях сервисов
  - Модалки эмитят `localForm`, родитель нормализует payload
  - Карточки используют `useLongPress`, клик не срабатывает при свайпе
  - Все новые публичные функции типизированы, без неявного `any`